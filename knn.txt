from math import sqrt
from collections import Counter
import pandas as pd

data = [
    [5.3, 3.7, 'Setosa'],
    [5.1, 3.8, 'Setosa'],
    [7.2, 3.0, 'Virginica'],
    [5.4, 3.4, 'Setosa'],
    [5.1, 3.3, 'Setosa'],
    [5.4, 3.9, 'Setosa'],
    [7.4, 2.8, 'Virginica'],
    [6.1, 2.8, 'Versicolor'],
    [7.3, 2.9, 'Virginica'],
    [6.0, 2.7, 'Versicolor'],
    [5.8, 2.8, 'Virginica'],
    [6.3, 2.3, 'Versicolor'],
    [5.1, 2.5, 'Versicolor'],
    [6.3, 2.5, 'Versicolor'],
    [5.4, 2.4, 'Versicolor']
]

new_instance = [5.2, 3.1]

def euclidean_distance(point1, point2):
    return sqrt(sum((p1 - p2) ** 2 for p1, p2 in zip(point1, point2)))

for instance in data:
    distance = euclidean_distance(new_instance, instance[:2])
    instance.append(distance)

df = pd.DataFrame(data, columns=['Sepal Length', 'Sepal Width', 'Species', 'Distance'])

df['Rank'] = df['Distance'].rank(method='min').astype(int)

print("Table with Distance and Rank:")
print(df)

def get_neighbors(df, k):
    df_sorted = df.sort_values('Distance').head(k)
    return df_sorted

def predict_classification(neighbors):
    classes = neighbors['Species'].values
    majority_vote = Counter(classes).most_common(1)[0][0]
    return majority_vote

for k in [1, 2, 3]:
    neighbors = get_neighbors(df, k)
    predicted_class = predict_classification(neighbors)
    print(f"\nPredicted class for k={k}: {predicted_class}")
