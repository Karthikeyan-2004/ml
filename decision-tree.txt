import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeClassifier, plot_tree
import matplotlib.pyplot as plt
data = {
    'Age': ['<=30', '<=30', '31...40', '>40', '>40', '>40', '31...40', '<=30', '<=30', '>40', '<=30', '31...40', '31...40', '>40'],
    'Income': ['high', 'high', 'high', 'medium', 'low', 'low', 'low', 'medium', 'low', 'medium', 'medium', 'medium', 'high', 'medium'],
    'Student': ['no', 'no', 'no', 'no', 'yes', 'yes', 'yes', 'no', 'yes', 'yes', 'yes', 'no', 'yes', 'no'],
    'Credit_Rating': ['fair', 'excellent', 'fair', 'fair', 'fair', 'excellent', 'excellent', 'fair', 'fair', 'fair', 'excellent', 'excellent', 'fair', 'excellent'],
    'Buys_Computer': ['no', 'no', 'yes', 'yes', 'yes', 'no', 'yes', 'no', 'yes', 'yes', 'yes', 'yes', 'yes', 'no']
}
df = pd.DataFrame(data)
def encode_column(column, mapping=None):
    if mapping is None:
        unique_values = column.unique()
        mapping = {value: i for i, value in enumerate(unique_values)}
    return column.map(mapping), mapping
encoded_data = {}
mappings = {}
for column in df.columns:
    encoded_data[column], mappings[column] = encode_column(df[column])
encoded_df = pd.DataFrame(encoded_data)
X = encoded_df.drop('Buys_Computer', axis=1)
y = encoded_df['Buys_Computer']
clf = DecisionTreeClassifier(criterion='entropy', random_state=42)
clf.fit(X, y)
new_example_data = {
    'Age': '<=30',
    'Income': 'medium',
    'Student': 'yes',
    'Credit_Rating': 'fair'
}
new_example_encoded = {}
for feature, value in new_example_data.items():
    if value in mappings[feature]:
        new_example_encoded[feature] = mappings[feature][value]
    else:
        # If a new value is encountered, assign it a new number
        new_value = max(mappings[feature].values()) + 1
        mappings[feature][value] = new_value
        new_example_encoded[feature] = new_value
new_example = pd.DataFrame([new_example_encoded])
prediction = clf.predict(new_example)
print(f"Prediction for the new example: {'Buys computer' if prediction[0] == 1 else 'Does not buy computer'}")
plt.figure(figsize=(12, 8))
plot_tree(clf, feature_names=X.columns, class_names=['No', 'Yes'], filled=True, rounded=True)
plt.show()





#RANDOM FOREST

import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
import matplotlib.pyplot as plt
from sklearn.tree import plot_tree
data = {
    'age': ['<=30', '<=30', '31...40', '>40', '>40', '>40', '31...40', '<=30', '<=30', '>40', '<=30', '31...40', '31...40', '>40'],
    'income': ['high', 'high', 'high', 'medium', 'low', 'low', 'low', 'medium', 'low', 'medium', 'medium', 'medium', 'high', 'medium'],
    'student': ['no', 'no', 'no', 'no', 'yes', 'yes', 'yes', 'no', 'yes', 'yes', 'yes', 'no', 'yes', 'no'],
    'credit_rating': ['fair', 'excellent', 'fair', 'fair', 'fair', 'excellent', 'fair', 'fair', 'fair', 'excellent', 'excellent', 'fair', 'excellent', 'fair'],
    'buys_computer': ['no', 'no', 'yes', 'yes', 'yes', 'no', 'yes', 'no', 'yes', 'yes', 'yes', 'yes', 'yes', 'no']
}
table = pd.DataFrame(data, columns=["age", "income", "student", "credit_rating", "buys_computer"])
encoder = LabelEncoder()
for column in table:
    table[column] = encoder.fit_transform(table[column])
X = table.iloc[:, 0:4].values  # Features (first 4 columns)
y = table.iloc[:, 4].values    # Target (last column)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=2)
model = RandomForestClassifier(n_estimators=3, random_state=2)
model.fit(X_train, y_train)
fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(20, 6))
for idx, tree in enumerate(model.estimators_):
    plot_tree(tree, feature_names=table.columns[:4], class_names=['No', 'Yes'], filled=True, ax=axes[idx])
    axes[idx].set_title(f'Decision Tree {idx+1}')
plt.tight_layout()
plt.show()

# Encoded test data: age<=30, income=medium, student=yes, credit-rating=fair
test_data = [[0, 2, 1, 0]]
prediction = model.predict(test_data)
if prediction == 1:
    print("Prediction: Buys Computer")
else:
    print("Prediction: Doesn't Buy Computer")